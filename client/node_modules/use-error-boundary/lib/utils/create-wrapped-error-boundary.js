"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWrappedErrorBoundary = createWrappedErrorBoundary;

var _react = _interopRequireDefault(require("react"));

var _ErrorBoundary = require("../ErrorBoundary");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/**
 * createWrappedErrorBoundary
 * Accepts an object with a onDidCatch callback.
 * Creates a UseErrorBoundaryWrapper HOC, to keep the onDidCatch callback while
 * still providing the ability to pass props to the ErrorBoundary
 * @param {object} options
 */
function createWrappedErrorBoundary(_ref) {
  var onDidCatch = _ref.onDidCatch;
  // Return function component that wraps ErrorBoundary and passes props to it
  return function UseErrorBoundaryWrapper(props) {
    // Return ErrorBoundary with original onDidCatch and the current props
    return _react["default"].createElement(_ErrorBoundary.ErrorBoundary, _extends({
      onDidCatch: onDidCatch
    }, props));
  };
}