"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useErrorBoundary = useErrorBoundary;

var _react = require("react");

var _createWrappedErrorBoundary = require("./utils/create-wrapped-error-boundary");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * useErrorBoundary
 * React hook to use an ErrorBoundary in your component and keep track of the
 * error state of that boundary.
 *
 * Uses a wrapped class component to create the error Boundary, but uses hooks to keep the state
 * in your function component.
 */
function useErrorBoundary() {
  // Reducer handling the error state
  var _useReducer = (0, _react.useReducer)(function (state, action) {
    switch (action.type) {
      // The component did catch, update state
      case "catch":
        return _objectSpread({}, state, {
          didCatch: true,
          // Pass the values from action.error and action.errorInfo
          error: action.error,
          errorInfo: action.errorInfo // Unknown action, return state

        });

      default:
        return state;
    }
  }, // Default state
  {
    didCatch: false,
    error: null,
    errorInfo: null
  }),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      _useReducer2$ = _useReducer2[0],
      didCatch = _useReducer2$.didCatch,
      error = _useReducer2$.error,
      errorInfo = _useReducer2$.errorInfo,
      dispatch = _useReducer2[1]; // Create ref for wrapped ErrorBoundary class


  var errorBoundaryWrapperRef = (0, _react.useRef)(null); // Get the current ref value or initialize it with a new wrapped ErrorBoundary

  function getWrappedErrorBoundary() {
    // Get current ref value
    var errorBoundaryWrapper = errorBoundaryWrapperRef.current; // Return the component when already initialized

    if (errorBoundaryWrapper !== null) {
      return errorBoundaryWrapper;
    } // Create new wrapped ErrorBoundary class with onDidCatch callback


    errorBoundaryWrapper = (0, _createWrappedErrorBoundary.createWrappedErrorBoundary)({
      // onDidCatch callback
      onDidCatch: function onDidCatch(err, errInfo) {
        // Dispatch action in case of an error
        dispatch({
          type: "catch",
          error: err,
          errorInfo: errInfo
        });
      }
    }); // Update the ref with new component

    errorBoundaryWrapperRef.current = errorBoundaryWrapper; // Return the newly created component

    return errorBoundaryWrapper;
  } // Return the wrapped ErrorBoundary class to wrap your components in plus the error state


  return {
    ErrorBoundary: getWrappedErrorBoundary(),
    didCatch: didCatch,
    error: error,
    errorInfo: errorInfo
  };
}