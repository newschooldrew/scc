{"ast":null,"code":"var _jsxFileName = \"/Users/andrewperez/Documents/projects/scc/client/src/CustomButton/CustomButton.js\";\nimport React, { useRef, useContext } from 'react';\nimport AuthContext from '../AuthContext';\nimport { removeItemFromInventory } from '../actions';\n\nconst CustomButton = ({\n  type,\n  id,\n  title,\n  price,\n  url,\n  qty\n}) => {\n  const {\n    state,\n    dispatch\n  } = useContext(AuthContext);\n  const {\n    allMasks,\n    cartItems\n  } = state;\n  let sessionCartItems = JSON.parse(sessionStorage.getItem('cart'));\n  let hitButton = useRef(0);\n  let newTotal;\n\n  const removeItemFromCart = (id, title, price) => {\n    const item = {\n      id,\n      title,\n      price\n    };\n    dispatch({\n      type: \"REMOVE_ITEM_FROM_CART\",\n      payload: item\n    });\n    let myCachedTotal = JSON.parse(sessionStorage.getItem('cartTotal'));\n\n    if (myCachedTotal == 1) {\n      sessionStorage.removeItem('cart');\n      sessionStorage.setItem('cartTotal', 0);\n    }\n\n    hitButton.current -= 1;\n    console.log(`${id} hitButton:`);\n    console.log(hitButton);\n    let existingNum = parseInt(sessionStorage.getItem(id));\n    sessionStorage.setItem(`${id}`, existingNum - 1);\n\n    try {\n      sessionStorage.setItem('cart', JSON.stringify(cartItems));\n      newTotal = cartItems.reduce((acc, cartItem) => acc + cartItem.quantity, 0);\n      sessionStorage.setItem('cartTotal', newTotal);\n    } catch (e) {\n      console.log(\"cartItems is empty\");\n    }\n  };\n\n  const addItemToCart = (id, title, price, url) => {\n    const item = {\n      id,\n      title,\n      price,\n      url\n    };\n    dispatch({\n      type: \"ADD_ITEM_TO_CART\",\n      payload: item\n    });\n    let foundItem; // removeItemFromInventory(id,sessionCartItems)\n\n    let existingNum;\n\n    if (sessionStorage.getItem(id)) {\n      existingNum = parseInt(sessionStorage.getItem(id));\n      sessionStorage.setItem(`${id}`, existingNum + 1);\n    } else {\n      console.log(\"existingNum does not exist\");\n      sessionStorage.setItem(`${id}`, 1);\n    }\n\n    hitButton.current += 1;\n    console.log(`${id} hitButton:`);\n    console.log(hitButton);\n\n    if (hitButton.current == qty) {\n      console.log(\"hitButton limit hit!!\");\n    }\n\n    try {\n      sessionStorage.setItem('cart', JSON.stringify(cartItems));\n      newTotal = cartItems.reduce((acc, cartItem) => acc + cartItem.quantity, 0);\n      sessionStorage.setItem('cartTotal', newTotal);\n    } catch (e) {\n      console.log(\"cartItems is empty\");\n    }\n  };\n\n  let limitReached, disabled;\n\n  if (sessionStorage.getItem(id) == qty) {\n    limitReached = true;\n  }\n\n  if (sessionCartItems && sessionCartItems.length > 0) {\n    let foundId = sessionCartItems.filter(e => e.id == id);\n    qty = sessionCartItems.find((e, i) => e.title == title);\n\n    try {\n      console.log(qty.quantity);\n    } catch (e) {\n      disabled = true;\n      console.log(\"no quantity\");\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, type == \"positive\" ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => addItemToCart(id, title, price, url),\n    disabled: limitReached,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }\n  }, \"+\")) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => removeItemFromCart(id, title, price, url),\n    disabled: disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, \"-\")));\n};\n\nexport default CustomButton;","map":{"version":3,"sources":["/Users/andrewperez/Documents/projects/scc/client/src/CustomButton/CustomButton.js"],"names":["React","useRef","useContext","AuthContext","removeItemFromInventory","CustomButton","type","id","title","price","url","qty","state","dispatch","allMasks","cartItems","sessionCartItems","JSON","parse","sessionStorage","getItem","hitButton","newTotal","removeItemFromCart","item","payload","myCachedTotal","removeItem","setItem","current","console","log","existingNum","parseInt","stringify","reduce","acc","cartItem","quantity","e","addItemToCart","foundItem","limitReached","disabled","length","foundId","filter","find","i"],"mappings":"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","sourcesContent":["import React, {useRef,useContext} from 'react'\nimport AuthContext from '../AuthContext'\nimport {removeItemFromInventory} from '../actions'\n\nconst CustomButton = ({type,id,title,price,url,qty}) => {\n    const {state,dispatch} = useContext(AuthContext)\n    const {allMasks,cartItems} = state;\n\n    let sessionCartItems = JSON.parse(sessionStorage.getItem('cart'))\n\n    let hitButton = useRef(0)\n    let newTotal;\n\n    const removeItemFromCart = (id,title,price) =>{\n        const item = {id,title,price};\n        dispatch({type:\"REMOVE_ITEM_FROM_CART\",payload:item})\n        let myCachedTotal = JSON.parse(sessionStorage.getItem('cartTotal'))\n    \n        if(myCachedTotal == 1){\n            sessionStorage.removeItem('cart');\n            sessionStorage.setItem('cartTotal',0)\n        }\n        hitButton.current -= 1\n        console.log(`${id } hitButton:`)\n        console.log(hitButton)\n            let existingNum = parseInt(sessionStorage.getItem(id));\n            sessionStorage.setItem(`${id}`,existingNum - 1)\n    \n            try{\n                \n                sessionStorage.setItem('cart',JSON.stringify(cartItems))\n                newTotal = cartItems.reduce((acc,cartItem) => acc + cartItem.quantity,0)\n                sessionStorage.setItem('cartTotal',newTotal)\n    \n            } catch(e){\n                console.log(\"cartItems is empty\")\n            }\n\n    }\n    \n    const addItemToCart = (id,title,price,url) =>{\n        const item = {id,title,price,url};\n        dispatch({type:\"ADD_ITEM_TO_CART\",payload:item})\n        let foundItem;\n        // removeItemFromInventory(id,sessionCartItems)\n    \n        let existingNum;\n          if(sessionStorage.getItem(id)){\n            existingNum = parseInt(sessionStorage.getItem(id));\n            sessionStorage.setItem(`${id}`,existingNum + 1)\n          } else{\n            console.log(\"existingNum does not exist\")\n            sessionStorage.setItem(`${id}`,1)\n          }\n\n          hitButton.current += 1\n          console.log(`${id } hitButton:`)\n          console.log(hitButton)\n          if(hitButton.current ==  qty){\n              console.log(\"hitButton limit hit!!\")\n          }\n\n          try{\n                \n            sessionStorage.setItem('cart',JSON.stringify(cartItems))\n            newTotal = cartItems.reduce((acc,cartItem) => acc + cartItem.quantity,0)\n            sessionStorage.setItem('cartTotal',newTotal)\n\n        } catch(e){\n            console.log(\"cartItems is empty\")\n        }\n\n    }\n\n    let limitReached,\n        disabled;\n    if(sessionStorage.getItem(id) == qty){\n        limitReached = true;\n    }\n\n    if(sessionCartItems && sessionCartItems.length > 0){\n      let foundId = sessionCartItems.filter(e => e.id == id)\n\n        qty = sessionCartItems.find((e,i) => e.title == title)\n        try{\n            console.log(qty.quantity)\n\n        } catch(e){\n            disabled = true\n                console.log(\"no quantity\")\n            }\n    }\n\n    return (<>\n        {type == \"positive\" ? (\n            <>\n                <button \n                    onClick={e => addItemToCart(id,title,price,url)}\n                    disabled={limitReached}\n                >\n                    +\n                </button>\n            </>\n        ): (\n            <>\n                <button\n                    onClick={() => removeItemFromCart(id,title,price,url)}\n                    disabled={disabled}\n                >\n                    -\n                </button>\n            </>\n        )}\n    </>)\n}\n\nexport default CustomButton"]},"metadata":{},"sourceType":"module"}