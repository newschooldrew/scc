{"ast":null,"code":"var _jsxFileName = \"/Users/andrewperez/Documents/projects/scc/client/src/CustomButton/CustomButton.js\";\nimport React, { useRef, useContext } from 'react';\nimport AuthContext from '../AuthContext';\nimport { removeItemFromInventory } from '../actions';\n\nconst CustomButton = (type, id, title, price, url) => {\n  const {\n    state,\n    dispatch\n  } = useContext(AuthContext);\n  const {\n    allMasks,\n    cartItems\n  } = state;\n  console.log(\"type:\");\n  console.log(type);\n  let sessionCartItems = JSON.parse(sessionStorage.getItem('cart'));\n  const hitButton = useRef(0);\n\n  const removeItemFromCart = (id, title, price) => {\n    const item = {\n      id,\n      title,\n      price\n    };\n    dispatch({\n      type: \"REMOVE_ITEM_FROM_CART\",\n      payload: item\n    });\n    let myCachedTotal = JSON.parse(sessionStorage.getItem('cartTotal'));\n\n    if (myCachedTotal == 1) {\n      sessionStorage.removeItem('cart');\n      sessionStorage.setItem('cartTotal', 0);\n    }\n\n    let existingNum = parseInt(sessionStorage.getItem(id));\n    sessionStorage.setItem(`${id}`, existingNum - 1);\n  };\n\n  const addItemToCart = (id, title, price, url) => {\n    console.log(state);\n    const item = {\n      id,\n      title,\n      price,\n      url\n    };\n    dispatch({\n      type: \"ADD_ITEM_TO_CART\",\n      payload: item\n    });\n    let foundItem;\n    removeItemFromInventory(id, sessionCartItems);\n    let existingNum;\n\n    if (sessionStorage.getItem(id)) {\n      existingNum = parseInt(sessionStorage.getItem(id));\n      console.log(\"existingNum exists\");\n      console.log(existingNum);\n      sessionStorage.setItem(`${id}`, existingNum + 1);\n    } else {\n      console.log(\"existingNum does not exist\");\n      sessionStorage.setItem(`${id}`, 1);\n    }\n\n    hitButton += 1;\n    console.log(\"hitButton:\");\n    console.log(hitButton);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, type == \"positive\" ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: e => addItemToCart(id, title, price, url),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, \"+\")) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => removeItemFromCart(id, title, price, url),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }, \"-\")));\n};\n\nexport default CustomButton;","map":{"version":3,"sources":["/Users/andrewperez/Documents/projects/scc/client/src/CustomButton/CustomButton.js"],"names":["React","useRef","useContext","AuthContext","removeItemFromInventory","CustomButton","type","id","title","price","url","state","dispatch","allMasks","cartItems","console","log","sessionCartItems","JSON","parse","sessionStorage","getItem","hitButton","removeItemFromCart","item","payload","myCachedTotal","removeItem","setItem","existingNum","parseInt","addItemToCart","foundItem","e"],"mappings":"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","sourcesContent":["import React, {useRef,useContext} from 'react'\nimport AuthContext from '../AuthContext'\nimport {removeItemFromInventory} from '../actions'\n\nconst CustomButton = (type,id,title,price,url) => {\n    const {state,dispatch} = useContext(AuthContext)\n    const {allMasks,cartItems} = state;\nconsole.log(\"type:\")\nconsole.log(type)\n    let sessionCartItems = JSON.parse(sessionStorage.getItem('cart'))\n\n    const hitButton = useRef(0)\n    const removeItemFromCart = (id,title,price) =>{\n        const item = {id,title,price};\n        dispatch({type:\"REMOVE_ITEM_FROM_CART\",payload:item})\n        let myCachedTotal = JSON.parse(sessionStorage.getItem('cartTotal'))\n    \n        if(myCachedTotal == 1){\n            sessionStorage.removeItem('cart');\n            sessionStorage.setItem('cartTotal',0)\n        }\n        \n            let existingNum = parseInt(sessionStorage.getItem(id));\n            sessionStorage.setItem(`${id}`,existingNum - 1)\n    \n    }\n    \n    const addItemToCart = (id,title,price,url) =>{\n        console.log(state)\n        const item = {id,title,price,url};\n        dispatch({type:\"ADD_ITEM_TO_CART\",payload:item})\n        let foundItem;\n        removeItemFromInventory(id,sessionCartItems)\n    \n        let existingNum;\n          if(sessionStorage.getItem(id)){\n            existingNum = parseInt(sessionStorage.getItem(id));\n            console.log(\"existingNum exists\")\n            console.log(existingNum)\n            sessionStorage.setItem(`${id}`,existingNum + 1)\n          } else{\n            console.log(\"existingNum does not exist\")\n            sessionStorage.setItem(`${id}`,1)\n          }\n\n          hitButton += 1\n\n          console.log(\"hitButton:\")\n          console.log(hitButton)\n    }\n\n    return (<>\n        {type == \"positive\" ? (\n            <>\n                <button onClick={e => addItemToCart(id,title,price,url)}>+</button>\n            </>\n        ): (\n            <>\n                <button onClick={() => removeItemFromCart(id,title,price,url)}>-</button>\n            </>\n        )}\n    </>)\n}\n\nexport default CustomButton"]},"metadata":{},"sourceType":"module"}