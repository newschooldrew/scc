{"ast":null,"code":"export const addItemToCart = (cartItems, cartItemToAdd) => {\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToAdd.id);\n\n  if (existingCartItem) {\n    return cartItems.map(cartItem => // returns a new array\n    // this returns a new version of our state\n    // so our components know how to re render properly\n    cartItem.id === cartItemToAdd.id ? { ...cartItem,\n      quantity: cartItem.quantity + 1\n    } : cartItem);\n  }\n\n  return [...cartItems, { ...cartItemToAdd,\n    quantity: 1\n  }];\n};\nexport const removeItemFromCart = (cartItems, cartItemToRemove, cartTotal) => {\n  // find out if there is an item in the count\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToRemove.id); // check if quantity is one\n  // you want to keep the values where they dont match\n\n  if (existingCartItem && existingCartItem.quantity == 1) {\n    return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id);\n  } // bring in cartItem\n\n\n  return cartItems.map(cartItem => cartItem.id == cartItemToRemove.id ? { ...cartItem,\n    quantity: cartItem.quantity - 1\n  } : cartItem // otherwise decrease the quantity                \n  // the new value of quantity is whatever that items quantity is, minus 1\n  );\n};\nexport const totalPrice = items => {\n  if (items) {\n    let price = items.reduce((acc, item) => acc + item.quantity * item.price, 0);\n    return price.toFixed(2);\n  } else {\n    return 0;\n  }\n};\nexport const totalItemPrice = item => {\n  let price = item.quantity * item.price;\n  return price.toFixed(2);\n};","map":{"version":3,"sources":["/Users/andrewperez/Documents/projects/scc/client/src/cart.utils.js"],"names":["addItemToCart","cartItems","cartItemToAdd","existingCartItem","find","cartItem","id","map","quantity","removeItemFromCart","cartItemToRemove","cartTotal","filter","totalPrice","items","price","reduce","acc","item","toFixed","totalItemPrice"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAG,CAACC,SAAD,EAAYC,aAAZ,KAA6B;AAClD,QAAMC,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CACrBC,QAAQ,IAAGA,QAAQ,CAACC,EAAT,KAAgBJ,aAAa,CAACI,EADpB,CAAzB;;AAGA,MAAGH,gBAAH,EAAoB;AAChB,WAAOF,SAAS,CAACM,GAAV,CAAcF,QAAQ,IACrB;AACA;AACA;AACAA,IAAAA,QAAQ,CAACC,EAAT,KAAgBJ,aAAa,CAACI,EAA9B,GACE,EAAC,GAAGD,QAAJ;AAAcG,MAAAA,QAAQ,EAACH,QAAQ,CAACG,QAAT,GAAoB;AAA3C,KADF,GAEEH,QANH,CAAP;AAQH;;AACD,SAAO,CAAC,GAAGJ,SAAJ,EAAc,EAAC,GAAGC,aAAJ;AAAkBM,IAAAA,QAAQ,EAAC;AAA3B,GAAd,CAAP;AACH,CAfE;AAiBP,OAAO,MAAMC,kBAAkB,GAAG,CAACR,SAAD,EAAWS,gBAAX,EAA4BC,SAA5B,KAA0C;AACpE;AACA,QAAMR,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CACrBC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EADxB,CAAzB,CAFoE,CAK5D;AACA;;AACA,MAAGH,gBAAgB,IAAIA,gBAAgB,CAACK,QAAjB,IAA6B,CAApD,EAAsD;AAClD,WAAOP,SAAS,CAACW,MAAV,CAAiBP,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EAA9D,CAAP;AACC,GATuD,CAUpD;;;AACH,SAAQL,SAAS,CAACM,GAAV,CAAcF,QAAQ,IACvBA,QAAQ,CAACC,EAAT,IAAeI,gBAAgB,CAACJ,EAAhC,GACE,EAAC,GAAGD,QAAJ;AAAaG,IAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AAA3C,GADF,GAEEH,QAHD,CAIL;AACA;AALK,GAAR;AAQJ,CAnBV;AAqBP,OAAO,MAAMQ,UAAU,GAAGC,KAAK,IAAG;AAC9B,MAAGA,KAAH,EAAS;AACL,QAAIC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAa,CAACC,GAAD,EAAKC,IAAL,KAAcD,GAAG,GAAGC,IAAI,CAACV,QAAL,GAAgBU,IAAI,CAACH,KAAtD,EAA4D,CAA5D,CAAZ;AACA,WAAOA,KAAK,CAACI,OAAN,CAAc,CAAd,CAAP;AACH,GAHD,MAGM;AACF,WAAO,CAAP;AACH;AACJ,CAPM;AASP,OAAO,MAAMC,cAAc,GAAGF,IAAI,IAAI;AAClC,MAAIH,KAAK,GAAGG,IAAI,CAACV,QAAL,GAAgBU,IAAI,CAACH,KAAjC;AACA,SAAOA,KAAK,CAACI,OAAN,CAAc,CAAd,CAAP;AACH,CAHM","sourcesContent":["export const addItemToCart = (cartItems, cartItemToAdd) =>{\n        const existingCartItem = cartItems.find(\n            cartItem =>cartItem.id === cartItemToAdd.id\n            )\n        if(existingCartItem){\n            return cartItems.map(cartItem =>\n                    // returns a new array\n                    // this returns a new version of our state\n                    // so our components know how to re render properly\n                    cartItem.id === cartItemToAdd.id\n                    ? {...cartItem, quantity:cartItem.quantity + 1}\n                    : cartItem\n            )\n        }\n        return [...cartItems,{...cartItemToAdd,quantity:1}]   \n    }\n\nexport const removeItemFromCart = (cartItems,cartItemToRemove,cartTotal) => {\n        // find out if there is an item in the count\n        const existingCartItem = cartItems.find(\n            cartItem => cartItem.id === cartItemToRemove.id\n            )\n                // check if quantity is one\n                // you want to keep the values where they dont match\n                if(existingCartItem && existingCartItem.quantity == 1){\n                    return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id)\n                    }\n                        // bring in cartItem\n                     return  cartItems.map(cartItem => \n                            cartItem.id == cartItemToRemove.id\n                            ? {...cartItem,quantity: cartItem.quantity - 1}\n                            : cartItem\n                        // otherwise decrease the quantity                \n                        // the new value of quantity is whatever that items quantity is, minus 1\n                            \n                    )\n                }\n\nexport const totalPrice = items =>{\n    if(items){\n        let price = items.reduce((acc,item) => acc + item.quantity * item.price,0);\n        return price.toFixed(2);\n    } else{\n        return 0\n    }\n}\n\nexport const totalItemPrice = item => {\n    let price = item.quantity * item.price;\n    return price.toFixed(2);\n}"]},"metadata":{},"sourceType":"module"}