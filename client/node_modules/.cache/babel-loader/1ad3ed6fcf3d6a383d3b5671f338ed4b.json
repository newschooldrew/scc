{"ast":null,"code":"export const addItemToCart = (cartItems, cartItemToAdd) => {\n  console.log(\"cartItems in util\");\n  console.log(cartItems);\n  console.log(typeof cartItems);\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToAdd.id);\n\n  if (existingCartItem) {\n    return cartItems.map(cartItem => // returns a new array\n    // this returns a new version of our state\n    // so our components know how to re render properly\n    cartItem.id === cartItemToAdd.id ? { ...cartItem,\n      quantity: cartItem.quantity + 1\n    } : cartItem);\n  }\n\n  return [...cartItems, { ...cartItemToAdd,\n    quantity: 1\n  }];\n};\nexport const removeItemFromCart = (cartItems, cartItemToRemove, cartTotal) => {\n  console.log(\"cartTotal:\");\n  console.log(cartTotal); // find out if there is an item in the count\n\n  console.log(\"cartItems from removeItem fn\");\n  console.log(cartItems);\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToRemove.id); // check if quantity is one\n  // you want to keep the values where they dont match\n\n  if (existingCartItem && existingCartItem.quantity == 1) {\n    return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id);\n  } // bring in cartItem\n\n\n  return cartItems.map(cartItem => cartItem.id == cartItemToRemove.id ? { ...cartItem,\n    quantity: cartItem.quantity - 1\n  } : cartItem // otherwise decrease the quantity                \n  // the new value of quantity is whatever that items quantity is, minus 1\n  );\n};\nexport const totalPrice = items => {\n  console.log(\"total Price items\");\n  console.log(items);\n  let price = items.reduce((acc, item) => acc + item.quantity * item.price, 0);\n  return price.toFixed(2);\n};\nexport const totalItemPrice = item => {\n  console.log(\"item:\");\n  console.log(item);\n  let price = item.quantity * item.price;\n  return price.toFixed(2);\n};","map":{"version":3,"sources":["/Users/andrewperez/Documents/projects/scc/client/src/cart.utils.js"],"names":["addItemToCart","cartItems","cartItemToAdd","console","log","existingCartItem","find","cartItem","id","map","quantity","removeItemFromCart","cartItemToRemove","cartTotal","filter","totalPrice","items","price","reduce","acc","item","toFixed","totalItemPrice"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAG,CAACC,SAAD,EAAYC,aAAZ,KAA6B;AACtDC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAOH,SAAnB;AACI,QAAMI,gBAAgB,GAAGJ,SAAS,CAACK,IAAV,CACrBC,QAAQ,IAAGA,QAAQ,CAACC,EAAT,KAAgBN,aAAa,CAACM,EADpB,CAAzB;;AAGA,MAAGH,gBAAH,EAAoB;AAChB,WAAOJ,SAAS,CAACQ,GAAV,CAAcF,QAAQ,IACrB;AACA;AACA;AACAA,IAAAA,QAAQ,CAACC,EAAT,KAAgBN,aAAa,CAACM,EAA9B,GACE,EAAC,GAAGD,QAAJ;AAAcG,MAAAA,QAAQ,EAACH,QAAQ,CAACG,QAAT,GAAoB;AAA3C,KADF,GAEEH,QANH,CAAP;AAQH;;AACD,SAAO,CAAC,GAAGN,SAAJ,EAAc,EAAC,GAAGC,aAAJ;AAAkBQ,IAAAA,QAAQ,EAAC;AAA3B,GAAd,CAAP;AACH,CAlBE;AAoBP,OAAO,MAAMC,kBAAkB,GAAG,CAACV,SAAD,EAAWW,gBAAX,EAA4BC,SAA5B,KAA0C;AACpEV,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYS,SAAZ,EAFoE,CAGpE;;AACAV,EAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;AACA,QAAMI,gBAAgB,GAAGJ,SAAS,CAACK,IAAV,CACrBC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EADxB,CAAzB,CANoE,CAS5D;AACA;;AACA,MAAGH,gBAAgB,IAAIA,gBAAgB,CAACK,QAAjB,IAA6B,CAApD,EAAsD;AAClD,WAAOT,SAAS,CAACa,MAAV,CAAiBP,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EAA9D,CAAP;AACC,GAbuD,CAcpD;;;AACH,SAAQP,SAAS,CAACQ,GAAV,CAAcF,QAAQ,IACvBA,QAAQ,CAACC,EAAT,IAAeI,gBAAgB,CAACJ,EAAhC,GACE,EAAC,GAAGD,QAAJ;AAAaG,IAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AAA3C,GADF,GAEEH,QAHD,CAIL;AACA;AALK,GAAR;AAQJ,CAvBV;AAyBP,OAAO,MAAMQ,UAAU,GAAGC,KAAK,IAAG;AAC9Bb,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYY,KAAZ;AACA,MAAIC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAa,CAACC,GAAD,EAAKC,IAAL,KAAcD,GAAG,GAAGC,IAAI,CAACV,QAAL,GAAgBU,IAAI,CAACH,KAAtD,EAA4D,CAA5D,CAAZ;AACA,SAAOA,KAAK,CAACI,OAAN,CAAc,CAAd,CAAP;AACH,CALM;AAOP,OAAO,MAAMC,cAAc,GAAGF,IAAI,IAAI;AAClCjB,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYgB,IAAZ;AACA,MAAIH,KAAK,GAAGG,IAAI,CAACV,QAAL,GAAgBU,IAAI,CAACH,KAAjC;AACA,SAAOA,KAAK,CAACI,OAAN,CAAc,CAAd,CAAP;AACH,CALM","sourcesContent":["export const addItemToCart = (cartItems, cartItemToAdd) =>{\n    console.log(\"cartItems in util\")\n    console.log(cartItems)\n    console.log(typeof cartItems)\n        const existingCartItem = cartItems.find(\n            cartItem =>cartItem.id === cartItemToAdd.id\n            )\n        if(existingCartItem){\n            return cartItems.map(cartItem =>\n                    // returns a new array\n                    // this returns a new version of our state\n                    // so our components know how to re render properly\n                    cartItem.id === cartItemToAdd.id\n                    ? {...cartItem, quantity:cartItem.quantity + 1}\n                    : cartItem\n            )\n        }\n        return [...cartItems,{...cartItemToAdd,quantity:1}]   \n    }\n\nexport const removeItemFromCart = (cartItems,cartItemToRemove,cartTotal) => {\n        console.log(\"cartTotal:\")\n        console.log(cartTotal)\n        // find out if there is an item in the count\n        console.log(\"cartItems from removeItem fn\")\n        console.log(cartItems)\n        const existingCartItem = cartItems.find(\n            cartItem => cartItem.id === cartItemToRemove.id\n            )\n                // check if quantity is one\n                // you want to keep the values where they dont match\n                if(existingCartItem && existingCartItem.quantity == 1){\n                    return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id)\n                    }\n                        // bring in cartItem\n                     return  cartItems.map(cartItem => \n                            cartItem.id == cartItemToRemove.id\n                            ? {...cartItem,quantity: cartItem.quantity - 1}\n                            : cartItem\n                        // otherwise decrease the quantity                \n                        // the new value of quantity is whatever that items quantity is, minus 1\n                            \n                    )\n                }\n\nexport const totalPrice = items =>{\n    console.log(\"total Price items\")\n    console.log(items)\n    let price = items.reduce((acc,item) => acc + item.quantity * item.price,0);\n    return price.toFixed(2);\n}\n\nexport const totalItemPrice = item => {\n    console.log(\"item:\")\n    console.log(item)\n    let price = item.quantity * item.price;\n    return price.toFixed(2);\n}"]},"metadata":{},"sourceType":"module"}