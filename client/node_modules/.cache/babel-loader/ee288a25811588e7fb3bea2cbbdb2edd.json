{"ast":null,"code":"var _jsxFileName = \"/Users/andrewperez/Documents/projects/scc/client/src/Receipt/Receipt.js\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport AuthContext from '../../AuthContext';\nimport { totalPrice, totalItemPrice } from '../../utils/cart.utils';\nimport { Table } from 'reactstrap';\nimport io from \"socket.io-client\";\nconst divStyle = {\n  margin: '100px 0 0 0'\n};\n\nconst Receipt = () => {\n  const {\n    state,\n    dispatch\n  } = useContext(AuthContext);\n  let {\n    username,\n    profile,\n    orderCount\n  } = state;\n  const cartItems = JSON.parse(sessionStorage.getItem('cart'));\n  const [data, setData] = useState(null);\n  const [endpoint, setEndpoint] = useState('http://localhost:5001');\n  let socket = io(endpoint);\n\n  const getData = item => {\n    console.log(\"get Data ran\");\n    console.log(item);\n    console.log(item.length);\n    sessionStorage.setItem('cart', 0);\n    sessionStorage.setItem('cartTotal', null);\n\n    if (username == \"alert_tester\") {\n      sessionStorage.setItem('orderCount', item.length);\n    }\n  };\n\n  useEffect(() => {\n    let orderNotification;\n    socket.emit(\"initial_data\", cartItems);\n    socket.on(\"get_data\", getData); // if(orderCountItems == null){\n    //     socket.emit(\"initial_data\",cartItems);\n    //     socket.on(\"get_data\", getData);\n    //     sessionStorage.setItem('orderCount',1)\n    //     orderNotification = [];\n    // let year = new Date().getFullYear()\n    // let month = new Date().getMonth()\n    // let date = new Date().getDate()\n    // let hours = new Date().getHours()\n    // let minutes = new Date().getMinutes()\n    // let time = new Date(year,month,date,hours,minutes)\n    //     orderNotification.push({alert:\"you have a new order\",date:time})\n    //     JSON.stringify(orderNotification)\n    //     console.log(\"orderNotification:\")\n    //     console.log(typeof orderNotification)\n    //     console.log(orderNotification)\n    //     sessionStorage.setItem('orderNotification',JSON.stringify(orderNotification))\n    // } else{\n    //     JSON.parse(orderCountItems)\n    //     orderCountItems++\n    //     JSON.stringify(orderCountItems)\n    //     sessionStorage.setItem('orderCount',orderCountItems++)\n    //     orderNotification = JSON.parse(sessionStorage.getItem('orderNotification'))\n    //     socket.emit(\"initial_data\",cartItems);\n    //     socket.on(\"get_data\", getData);\n    //     console.log(\"orderNotification:\")\n    //     console.log(typeof orderNotification)\n    //     console.log(orderNotification[0])\n    //     orderNotification.push({alert:\"you have a new order\",date:new Date()})\n    //     JSON.stringify(orderNotification)\n    //     sessionStorage.setItem('orderNotification',JSON.stringify(orderNotification))\n    // }\n  }, []);\n  window.addEventListener('beforeunload', function (e) {\n    e.preventDefault(); // If you prevent default behavior in Mozilla Firefox prompt will always be shown\n\n    sessionStorage.removeItem('cart');\n    sessionStorage.removeItem('cartTotal'); // Cancel the event\n    // Chrome requires returnValue to be set\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, \"Your payment was processed\"), /*#__PURE__*/React.createElement(Table, {\n    responsive: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, \"Title\"), /*#__PURE__*/React.createElement(\"th\", {\n    className: \"text-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  }, \"Cart\"), /*#__PURE__*/React.createElement(\"th\", {\n    className: \"text-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, \"Quantity\"), /*#__PURE__*/React.createElement(\"th\", {\n    className: \"text-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, \"Total\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, cartItems.map((cart, idx) => {\n    console.log(cart.price);\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      key: idx,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 29\n      }\n    }, cart.title), /*#__PURE__*/React.createElement(\"td\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 29\n      }\n    }, cart.price), /*#__PURE__*/React.createElement(\"td\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 29\n      }\n    }, cart.quantity), /*#__PURE__*/React.createElement(\"td\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 29\n      }\n    }, totalItemPrice(cart)));\n  }), \"Total: \", totalPrice(cartItems))));\n};\n\nexport default Receipt;","map":{"version":3,"sources":["/Users/andrewperez/Documents/projects/scc/client/src/Receipt/Receipt.js"],"names":["React","useState","useEffect","useContext","AuthContext","totalPrice","totalItemPrice","Table","io","divStyle","margin","Receipt","state","dispatch","username","profile","orderCount","cartItems","JSON","parse","sessionStorage","getItem","data","setData","endpoint","setEndpoint","socket","getData","item","console","log","length","setItem","orderNotification","emit","on","window","addEventListener","e","preventDefault","removeItem","map","cart","idx","price","title","quantity"],"mappings":"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","sourcesContent":["import React, {useState,useEffect,useContext} from 'react'\nimport AuthContext from '../../AuthContext'\nimport {totalPrice,totalItemPrice} from '../../utils/cart.utils'\nimport { Table } from 'reactstrap';\nimport io from \"socket.io-client\";\n\nconst divStyle = {\n    margin:'100px 0 0 0'\n}\n\n\nconst Receipt = () => {\n    const {state,dispatch} = useContext(AuthContext)\n    let {username,profile,orderCount} = state;\n    const cartItems = JSON.parse(sessionStorage.getItem('cart'))\n    \n    const [data,setData] = useState(null)\n    const [endpoint,setEndpoint] = useState('http://localhost:5001')\n    let socket = io(endpoint);\n\n    const getData = item => {\n        console.log(\"get Data ran\");\n        console.log(item)\n        console.log(item.length)\n        sessionStorage.setItem('cart',0)\n        sessionStorage.setItem('cartTotal',null)\n        if(username == \"alert_tester\"){\n            sessionStorage.setItem('orderCount',item.length)\n        }\n      };\n\n    useEffect(()=>{\n        let orderNotification;\n        socket.emit(\"initial_data\",cartItems);\n        socket.on(\"get_data\", getData);\n\n        // if(orderCountItems == null){\n        //     socket.emit(\"initial_data\",cartItems);\n        //     socket.on(\"get_data\", getData);\n        //     sessionStorage.setItem('orderCount',1)\n        //     orderNotification = [];\n            // let year = new Date().getFullYear()\n            // let month = new Date().getMonth()\n            // let date = new Date().getDate()\n            // let hours = new Date().getHours()\n            // let minutes = new Date().getMinutes()\n            // let time = new Date(year,month,date,hours,minutes)\n        //     orderNotification.push({alert:\"you have a new order\",date:time})\n            \n        //     JSON.stringify(orderNotification)\n        //     console.log(\"orderNotification:\")\n        //     console.log(typeof orderNotification)\n        //     console.log(orderNotification)\n        //     sessionStorage.setItem('orderNotification',JSON.stringify(orderNotification))\n        // } else{\n        //     JSON.parse(orderCountItems)\n        //     orderCountItems++\n        //     JSON.stringify(orderCountItems)\n        //     sessionStorage.setItem('orderCount',orderCountItems++)\n            \n        //     orderNotification = JSON.parse(sessionStorage.getItem('orderNotification'))\n        //     socket.emit(\"initial_data\",cartItems);\n        //     socket.on(\"get_data\", getData);\n        //     console.log(\"orderNotification:\")\n        //     console.log(typeof orderNotification)\n        //     console.log(orderNotification[0])\n        //     orderNotification.push({alert:\"you have a new order\",date:new Date()})\n        //     JSON.stringify(orderNotification)\n        //     sessionStorage.setItem('orderNotification',JSON.stringify(orderNotification))\n        // }\n        \n    },[])\n\n    window.addEventListener('beforeunload', function (e) {\n        e.preventDefault(); // If you prevent default behavior in Mozilla Firefox prompt will always be shown\n        sessionStorage.removeItem('cart')\n        sessionStorage.removeItem('cartTotal')\n        // Cancel the event\n        // Chrome requires returnValue to be set\n      });\n\n    return (<div style={divStyle}>\n            <div>Your payment was processed</div>\n            <Table responsive>\n                <thead>\n            <tr>\n                <th className=\"text-center\">Title</th>\n                <th className=\"text-right\">Cart</th>\n                <th className=\"text-right\">Quantity</th>\n                <th className=\"text-right\">Total</th>\n            </tr>\n            </thead>\n            <tbody>\n                {\n                    cartItems.map((cart,idx) => {\n                        console.log(cart.price)\n                        return (\n                        <tr key={idx}>\n                            <td className=\"text-center\">{cart.title}</td>\n                            <td className=\"text-center\">{cart.price}</td>\n                            <td className=\"text-center\">{cart.quantity}</td>\n                            <td className=\"text-center\">{totalItemPrice(cart)}</td>\n                        </tr>\n                            )\n                        })\n                    }\n                Total: {totalPrice(cartItems)}\n            </tbody>\n            </Table>\n            </div>)\n}\n\nexport default Receipt\n"]},"metadata":{},"sourceType":"module"}